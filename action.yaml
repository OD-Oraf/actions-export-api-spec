name: 'Export API Specs from MuleSoft Anypoint Exchange'
description: 'Downloads OpenAPI specifications, categories, tags, and documentation from MuleSoft Anypoint Exchange using modular scripts'
author: 'Your Organization'

inputs:
  exchange_url:
    description: 'MuleSoft Anypoint Exchange URL'
    required: false
    default: 'https://anypoint.mulesoft.com'
  
  organization_id:
    description: 'MuleSoft Organization ID'
    required: true
    default: '1bb53e2e-0362-40c7-80cc-273290c8d74b'
  
  asset_id:
    description: 'Asset ID to download (optional - if not provided, downloads all assets)'
    required: false
    default: 'openapi'
  
  asset_version:
    description: 'Asset version to download'
    required: false
    default: '1.0.0'

  documentation_output_dir:
    description: 'Output directory for documentation'
    required: false
    default: 'exchange-export'

  categories_output_dir:
    description: 'Output directory for categories'
    required: false
    default: 'exchange-export'

  api_spec_output_dir:
    description: 'Output directory for OpenAPI specifications'
    required: false
    default: 'exchange-export'

  dry_run:
    description: 'If true, skip git commit and push operations'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      shell: bash
      run: |
        pip install requests pyyaml markdownify python-dotenv
    
    - name: Install Anypoint CLI
      shell: bash
      run: |
        npm install -g anypoint-cli-v4

    - name: Set environment variables
      shell: bash
      run: |
        echo "::group::Set environment variables"
        
        echo "=================================================="
        echo " SETTING UP ENVIRONMENT VARIABLES"
        echo "=================================================="
        set -euxo pipefail
        
        echo "üîë Setting environment variables..."
        echo "ORGANIZATION_ID=${{ inputs.organization_id }}" >> $GITHUB_ENV
        echo "ASSET_ID=${{ inputs.asset_id }}" >> $GITHUB_ENV
        echo "ASSET_VERSION=${{ inputs.asset_version }}" >> $GITHUB_ENV
        echo "EXCHANGE_URL=${{ inputs.exchange_url }}" >> $GITHUB_ENV
        
        echo "::endgroup::"

    - name: Generate MuleSoft Access Token
      shell: bash
      env:
        CLIENT_ID: ${{ env.CLIENT_ID }}
        CLIENT_SECRET: ${{ env.CLIENT_SECRET }}
      run: |
        echo "::group::Generate MuleSoft Access Token"
        
        echo "=================================================="
        echo " GENERATING MULESOFT ACCESS TOKEN"
        echo "=================================================="
        set -ex
        
        # Make OAuth2 request to get access token
        curl --location 'https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token' \
          --header 'Content-Type: application/json' \
          --data '{
              "grant_type" : "client_credentials",
              "client_id" : "${{ env.CLIENT_ID }}",
              "client_secret" : "${{ env.CLIENT_SECRET }}"
          }' | tee response.json
        
        # Extract access token from response
        ACCESS_TOKEN=$(cat response.json | jq -r '.access_token')
        
        if [ -z "$ACCESS_TOKEN" ]; then
          echo "‚ùå Failed to get access token"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Successfully generated access token"
        
        # Make access token available to subsequent steps
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
        
        echo "::endgroup::"
        
    - name: Download API specifications using Anypoint CLI
      shell: bash
      env:
        EXPORT_DIR: ${{ inputs.api_spec_output_dir }}
      run: |
        echo "::group::Download API specifications using Anypoint CLI"
        
        echo "=================================================="
        echo " DOWNLOADING API SPECIFICATION FILE"
        echo "=================================================="
        set -ex
        
        chmod +x ${{ github.action_path }}/export-api.sh
        ${{ github.action_path }}/export-api.sh
        
        echo "::endgroup::"
        
        
    - name: Export categories metadata
      shell: bash
      run: |
        echo "::group::Export categories metadata"
        echo "=================================================="
        echo "EXPORTING CATEGORIES"
        echo "=================================================="
        set -eu pipefail
        python ${{ github.action_path }}/export_categories.py
        cat categories.json
        mv categories.json ${{ inputs.categories_output_dir }}
        echo "::endgroup::"
        
    - name: Export documentation
      shell: bash
      env:
        CLIENT_ID: ${{ env.CLIENT_ID }}
        CLIENT_SECRET: ${{ env.CLIENT_SECRET }}
        EXCHANGE_URL: ${{ inputs.exchange_url }}
        ORGANIZATION_ID: ${{ inputs.organization_id }}
        ASSET_ID: ${{ inputs.asset_id }}
        ASSET_VERSION: ${{ inputs.asset_version }}
        OUTPUT_DIR: ${{ inputs.documentation_output_dir }}
      run: |
        echo "::group::Export documentation"
        
        echo "=================================================="
        echo "EXPORTING DOCUMENTATION"
        echo "=================================================="
        set -ex
        
        python ${{ github.action_path }}/export_documentation.py
        
        echo "::endgroup::"

    - name: Check exported files and add to git
      shell: bash
      run: |
        echo "::group::Check exported files and add to git"
        
        set -ex
        
        echo "üîç Checking for exported files and adding to git..."
        
        # Check and add documentation folder
        if [ -d "${{ inputs.documentation_output_dir }}/documentation" ]; then
          echo "‚úÖ Documentation folder found: ${{ inputs.documentation_output_dir }}/documentation"
          ls -la "${{ inputs.documentation_output_dir }}/documentation"
          git add "${{ inputs.documentation_output_dir }}/documentation"
          echo "üìÅ Added documentation folder to git"
        else
          echo "‚ùå Documentation folder not found: ${{ inputs.documentation_output_dir }}/documentation"
        fi
        
        # Check and add categories.json
        if [ -f "${{ inputs.categories_output_dir }}/categories.json" ]; then
          echo "‚úÖ Categories file found: ${{ inputs.categories_output_dir }}/categories.json"
          ls -la "${{ inputs.categories_output_dir }}/categories.json"
          git add "${{ inputs.categories_output_dir }}/categories.json"
          echo "üìÑ Added categories.json to git"
        else
          echo "‚ùå Categories file not found: ${{ inputs.categories_output_dir }}/categories.json"
        fi
        
        # Check and add API spec files
        SPEC_FILE="${{ inputs.api_spec_output_dir }}/${{ inputs.asset_id }}.yaml"
        if [ -f "$SPEC_FILE" ]; then
          echo "‚úÖ API spec file found: $SPEC_FILE"
          ls -la "$SPEC_FILE"
          git add "$SPEC_FILE"
          echo "üìã Added API spec file to git"
        else
          echo "‚ùå API spec file not found: $SPEC_FILE"
          echo "üîç Checking for other files in directory:"
          if [ -d "${{ inputs.api_spec_output_dir }}" ]; then
            ls -la "${{ inputs.api_spec_output_dir }}"
          else
            echo "Directory does not exist: ${{ inputs.api_spec_output_dir }}"
          fi
        fi
        
        # Show git status
        echo "üìä Git status after adding files:"
        git status --porcelain
        
        # Commit and push changes (only if not in dry run mode)
        if [ "${{ inputs.dry_run }}" != "true" ]; then
          echo "üöÄ Committing and pushing changes..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update API specs, categories, and documentation"
            git push
          fi
        else
          echo "üîÑ Dry run mode - skipping commit and push"
        fi
        
        echo "::endgroup::"
        
    - name: Debug - Show directory structure and environment
      if: always()
      shell: bash
      run: |
        echo "::group::Debug - Show directory structure and environment"
        
        echo "=================================================="
        echo "üîç DEBUG: FINAL SYSTEM STATE"
        echo "=================================================="
        set -ex
        
        echo "üîç Installing tree for directory visualization..."
        sudo apt-get update -qq
        sudo apt-get install -y tree
        
        echo ""
        echo "üìÅ Current working directory:"
        pwd
        
        echo ""
        echo "üå≥ Directory tree structure:"
        tree -a -L 3 || ls -la
        
        echo ""
        echo "üìã Environment variables (filtered for MuleSoft):"
        env | grep -E "(CLIENT_ID|CLIENT_SECRET|ORGANIZATION_ID|ASSET_ID|ASSET_VERSION|ACCESS_TOKEN|EXCHANGE_URL)" | sed 's/CLIENT_SECRET=.*/CLIENT_SECRET=***REDACTED***/' || echo "No MuleSoft environment variables found"
        
        echo ""
        echo "üìÑ Files in current directory:"
        ls -la
        
        echo ""
        echo "üìÑ YAML/JSON files found:"
        find . -name "*.yaml" -o -name "*.yml" -o -name "*.json" | head -20 || echo "No YAML/JSON files found"
        
        echo ""
        echo "üìÑ Categories file content (if exists):"
        if [ -f "categories.json" ]; then
          echo "categories.json found:"
          cat categories.json | head -50
        else
          echo "categories.json not found"
        fi
        
        echo ""
        echo "üìÅ Documentation directory (if exists):"
        if [ -d "documentation" ]; then
          echo "documentation/ directory found:"
          ls -la documentation/
          echo ""
          echo "Documentation subdirectories:"
          find documentation/ -type d | head -10
        else
          echo "documentation/ directory not found"
        fi
        
        echo ""
        echo "üìÅ API spec directory (if exists):"
        if [ -d "api-spec" ]; then
          echo "api-spec/ directory found:"
          ls -la api-spec/
        else
          echo "api-spec/ directory not found"
        fi
        
        echo ""
        echo "üíæ Disk usage:"
        du -sh . 2>/dev/null || echo "Could not calculate disk usage"
        
        echo ""
        echo "üîç Debug complete!"
        
        echo "::endgroup::"
        

    - name: Generate Summary
      if: always()
      shell: bash
      run: |
        {
          echo "## Build Summary"
          echo "- **Status**: $([ $? -eq 0 ] && echo "‚úÖ Success" || echo "‚ùå Failed")"
          echo "- **Duration**: $((SECONDS / 60)) minutes"
          echo "- **Commit**: ${{ github.sha }}"
        } >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'download'
  color: 'blue'