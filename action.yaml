name: 'Export API Specs from MuleSoft Anypoint Exchange'
description: 'Downloads OpenAPI specifications, categories, tags, and documentation from MuleSoft Anypoint Exchange using modular scripts'
author: 'Your Organization'

inputs:
  exchange-url:
    description: 'MuleSoft Anypoint Exchange URL'
    required: false
    default: 'https://anypoint.mulesoft.com'
  
  organization-id:
    description: 'MuleSoft Organization ID'
    required: true
    default: '1bb53e2e-0362-40c7-80cc-273290c8d74b'
  
  asset-id:
    description: 'Asset ID to download (optional - if not provided, downloads all assets)'
    required: false
    default: 'openapi'
  
  asset-version:
    description: 'Asset version to download'
    required: false
    default: '1.0.0'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      shell: bash
      run: |
        pip install requests pyyaml markdownify python-dotenv
    
    - name: Install Anypoint CLI
      shell: bash
      run: |
        npm install -g anypoint-cli-v4

    - name: Set environment variables
      shell: bash
      run: |
        set -euxo pipefail
        
        echo "🔑 Setting environment variables..."
        echo "ORGANIZATION_ID=${{ inputs.organization-id }}" >> $GITHUB_ENV
        echo "ASSET_ID=${{ inputs.asset-id }}" >> $GITHUB_ENV
        echo "ASSET_VERSION=${{ inputs.asset-version }}" >> $GITHUB_ENV
        echo "EXCHANGE_URL=${{ inputs.exchange-url }}" >> $GITHUB_ENV

    - name: Generate MuleSoft Access Token
      shell: bash
      env:
        CLIENT_ID: ${{ env.CLIENT_ID }}
        CLIENT_SECRET: ${{ env.CLIENT_SECRET }}
      run: |
        set -e
        echo "🔐 Generating MuleSoft access token..."
        
        # Make OAuth2 request to get access token
        RESPONSE=$(curl --location 'https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token' \
          --header 'Content-Type: application/json' \
          --data '{
              "grant_type" : "client_credentials",
              "client_id" : "${{ env.CLIENT_ID }}",
              "client_secret" : "${{ env.CLIENT_SECRET }}"
          }')
        
        # Extract access token from response
        ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.accessToken')
        
        if [ -z "$ACCESS_TOKEN" ]; then
          echo "❌ Failed to get access token"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
        echo "✅ Successfully generated access token"
        
        # Make access token available to subsequent steps
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
    
    - name: Download API specifications using Anypoint CLI
      shell: bash
      env:
        CLIENT_ID: ${{ env.CLIENT_ID }}
        CLIENT_SECRET: ${{ env.CLIENT_SECRET }}
        ORGANIZATION_ID: ${{ inputs.organization-id }}
        ASSET_ID: ${{ inputs.asset-id }}
        ASSET_VERSION: ${{ inputs.asset-version }}
      run: |
        set -euxo pipefail
        
        chmod +x ${{ github.action_path }}/export-api.sh
        ${{ github.action_path }}/export-api.sh
        
    
    - name: Export categories metadata
      if: ${{ inputs.include-metadata == 'true' }}
      shell: bash
      env:
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        ORGANIZATION_ID: ${{ inputs.organization-id }}
        ASSET_ID: ${{ inputs.asset-id }}
        ASSET_VERSION: ${{ inputs.asset-version }}
      run: |
        set -euxo pipefail
        python ${{ github.action_path }}/export_categories.py
        cat categories.json
        
    
    - name: Export documentation
      if: ${{ inputs.include-documentation == 'true' }}
      shell: bash
      env:
        CLIENT_ID: ${{ env.CLIENT_ID }}
        CLIENT_SECRET: ${{ env.CLIENT_SECRET }}
        EXCHANGE_URL: ${{ inputs.exchange-url }}
        ORGANIZATION_ID: ${{ inputs.organization-id }}
        ASSET_ID: ${{ inputs.asset-id }}
        ASSET_VERSION: ${{ inputs.asset-version }}
        OUTPUT_DIR: documentation-export
      run: |
        set -euxo pipefail
        
        python ${{ github.action_path }}/export_documentation.py
        mv api-specs/documentation .
        
    
#    - name: Move files to repository destination
#      shell: bash
#      run: |
#        # Set documentation path, handling empty or '.' values
#        DOC_PATH="${{ inputs.documentation-path }}"
#        if [ "$DOC_PATH" = "." ] || [ -z "$DOC_PATH" ]; then
#          DOC_FULL_PATH="${{ inputs.repository-destination }}/documentation"
#        else
#          DOC_FULL_PATH="${{ inputs.repository-destination }}/documentation/$DOC_PATH"
#        fi
#
#        # Set categories path, handling empty or '.' values
#        CAT_PATH="${{ inputs.categories-path }}"
#        if [ "$CAT_PATH" = "." ] || [ -z "$CAT_PATH" ]; then
#          CAT_FULL_PATH="${{ inputs.repository-destination }}"
#        else
#          CAT_FULL_PATH="${{ inputs.repository-destination }}/$CAT_PATH"
#        fi
#
#        # Set specs path, handling empty or '.' values
#        SPECS_PATH="${{ inputs.specs-path }}"
#        if [ "$SPECS_PATH" = "." ] || [ -z "$SPECS_PATH" ]; then
#          SPECS_FULL_PATH="${{ inputs.repository-destination }}"
#        else
#          SPECS_FULL_PATH="${{ inputs.repository-destination }}/$SPECS_PATH"
#        fi
#
#        # Create destination directories
#        mkdir -p "$DOC_FULL_PATH" "$CAT_FULL_PATH" "$SPECS_FULL_PATH"
#
#        # Move API specifications
#        if ls *.yaml *.yml *.json 2>/dev/null; then
#          echo "Moving API specifications to $SPECS_FULL_PATH"
#          mv *.yaml *.yml *.json "$SPECS_FULL_PATH/" 2>/dev/null || true
#        fi
#
#        # Move categories file
#        if [ -f "categories.json" ]; then
#          echo "Moving categories.json to $CAT_FULL_PATH"
#          mv categories.json "$CAT_FULL_PATH/"
#        fi
#
#        # Move documentation files
#        if [ -d "documentation-export" ]; then
#          echo "Moving documentation to $DOC_FULL_PATH"
#          cp -r documentation-export/* "$DOC_FULL_PATH/" 2>/dev/null || true
#          rm -rf documentation-export
#        fi
#
#        # Clean up temporary directories
#        rm -rf api-spec 2>/dev/null || true
#
#        echo "output-path=${{ inputs.repository-destination }}" >> $GITHUB_OUTPUT
#
#    - name: Commit and push changes
#      shell: bash
#      run: |
#        git config --local user.email "action@github.com"
#        git config --local user.name "GitHub Action"
#        git add .
#        if git diff --staged --quiet; then
#          echo "No changes to commit"
#        else
#          git commit -m "Update API specs, categories, and documentation from MuleSoft Anypoint Exchange"
#          git push
#        fi
#
#    - name: Upload artifacts
#      uses: actions/upload-artifact@v4
#      with:
#        name: mulesoft-api-specs
#        path: ${{ inputs.repository-destination }}
#        retention-days: 30

branding:
  icon: 'download'
  color: 'blue'